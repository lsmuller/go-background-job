// Code generated by MockGen. DO NOT EDIT.
// Source: worker/redis/worker.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	workers "github.com/topfreegames/go-workers"
)

// MockWorkerInterface is a mock of WorkerInterface interface.
type MockWorkerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerInterfaceMockRecorder
}

// MockWorkerInterfaceMockRecorder is the mock recorder for MockWorkerInterface.
type MockWorkerInterfaceMockRecorder struct {
	mock *MockWorkerInterface
}

// NewMockWorkerInterface creates a new mock instance.
func NewMockWorkerInterface(ctrl *gomock.Controller) *MockWorkerInterface {
	mock := &MockWorkerInterface{ctrl: ctrl}
	mock.recorder = &MockWorkerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerInterface) EXPECT() *MockWorkerInterfaceMockRecorder {
	return m.recorder
}

// Enqueue mocks base method.
func (m *MockWorkerInterface) Enqueue(queue string, args interface{}, opts *workers.EnqueueOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enqueue", queue, args, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockWorkerInterfaceMockRecorder) Enqueue(queue, args, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockWorkerInterface)(nil).Enqueue), queue, args, opts)
}

// Register mocks base method.
func (m *MockWorkerInterface) Register(queue string, concurrency int, job func(*workers.Msg)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", queue, concurrency, job)
}

// Register indicates an expected call of Register.
func (mr *MockWorkerInterfaceMockRecorder) Register(queue, concurrency, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockWorkerInterface)(nil).Register), queue, concurrency, job)
}
